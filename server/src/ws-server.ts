import WebSocket from 'ws';

import { handleAuthMessage, handleRegularMessage } from './service/websocket/auth.js';
import { ServiceMessage } from './service/ServiceMessage/ServiceMessage.js';
import { handleAndLogError } from './errors/error.js';

interface ConnectionState {
  isAuthenticated: boolean;
  userId: string | null;
}

export function setupWebSocketWithAuth(
  wss: WebSocket.Server,
  wsConnections: Map<string, WebSocket>
) {
  wss.on('connection', (ws) => {
    // console.log('üîå New WebSocket connection (waiting for auth)');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const state: ConnectionState = {
      isAuthenticated: false,
      userId: null,
    };

    // –¢–∞–π–º–∞—É—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authTimeout = setTimeout(() => {
      if (!state.isAuthenticated) {
        // console.log('‚ùå Authentication timeout');
        ws.close(1008, 'Authentication timeout');
        state.userId && wsConnections.delete(state.userId);
      }
    }, 5000);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    ws.send(
      JSON.stringify({
        type: 'AUTH_REQUIRED',
        message: 'Send AUTH message with token',
      })
    );

    ws.on('message', (data) => handleMessage({ ws, data, state, authTimeout, wsConnections }));

    ws.on('close', () => {
      clearTimeout(authTimeout);
      state.userId && wsConnections.delete(state.userId);
      // console.log(`‚ùå Connection closed for user ${state.userId}`);
    });

    ws.on('error', (error) => {
      state.userId && wsConnections.delete(state.userId);
      handleAndLogError(error);
    });
  });
}

async function handleMessage({
  ws,
  data,
  state,
  authTimeout,
  wsConnections,
}: {
  ws: WebSocket;
  data: WebSocket.RawData;
  state: ConnectionState;
  authTimeout: NodeJS.Timeout;
  wsConnections: Map<string, WebSocket>;
}) {
  try {
    const message = JSON.parse(data.toString());

    // –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (state.isAuthenticated) {
      handleRegularMessage(ws, state.userId!, data);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (message.type === 'AUTH' && message.token) {
      const authResult = handleAuthMessage(message.token);

      if (authResult.userId) {
        // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        state.isAuthenticated = true;
        state.userId = authResult.userId;
        wsConnections.set(authResult.userId, ws);
        clearTimeout(authTimeout);

        // console.log(`‚úÖ User ${state.userId} authenticated`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        ws.send(
          JSON.stringify({
            type: 'AUTH_SUCCESS',
            userId: state.userId,
          })
        );

        const serviceMessage = new ServiceMessage();
        const messages = await serviceMessage.getAll(state.userId);

        ws.send(
          JSON.stringify({
            type: 'SERVICE_MESSAGES',
            data: messages.data,
          })
        );

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ messageHandler –æ—Å—Ç–∞—ë—Ç—Å—è, –Ω–æ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å handleRegularMessage
        // –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–≤–µ—Ä–∫–µ state.isAuthenticated
      } else {
        ws.send(
          JSON.stringify({
            type: 'AUTH_ERROR',
            message: authResult.error,
          })
        );
        ws.close(1008, authResult.error);
      }
    } else {
      // –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ AUTH
      ws.send(
        JSON.stringify({
          type: 'AUTH_ERROR',
          message: 'First message must be AUTH with token',
        })
      );
      ws.close(1008, 'Authentication required');
    }
  } catch (error) {
    ws.send(
      JSON.stringify({
        type: 'ERROR',
        message: 'Invalid message format',
      })
    );
    handleAndLogError(error);
  }
}
