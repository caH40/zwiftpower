import { HandlerSeries } from './HandlerSeries.js';
import { addAgeAndFlagNew } from '../protocol/age-and-flag.js';
import { FinishGaps } from '../../utils/FinishGaps.js';
import { StageResultModel } from '../../Model/StageResult.js';
import { NSeriesModel } from '../../Model/NSeries.js';
import { TSeriesType } from '../../types/model.interface.js';
import { TourGCManager } from './tour/TourGCManager.js';
import { TResponseService } from '../../types/http.interface.js';

// types

/**
 * –ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è) –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å–µ—Ä–∏–π –∏ —Ç—É—Ä–æ–≤.
 * -–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö;
 * -–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å–µ—Ä–∏–∏(—Ç—É—Ä–∞) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫;
 */
export class SeriesStageProtocolManager extends HandlerSeries {
  constructor(public seriesId: string) {
    super(seriesId);
  }

  async updateStageProtocolAndGC(stageOrder: number): Promise<TResponseService<null>> {
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–Ω–∏—à–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —ç—Ç–∞–ø–∞ stageOrder —Å–µ—Ä–∏–∏ seriesId.
    const { seriesType } = await this.buildStageProtocol(stageOrder);

    const initialResponse = {
      data: null,
      message: `üìù –¢–∏–ø '${seriesType}' –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏`,
    };

    switch (seriesType) {
      case 'series':
        return initialResponse;

      case 'tour': {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ—Ä–∏–∏.
        const tourGC = new TourGCManager(this.seriesId);
        const res = await tourGC.update();

        return {
          data: null,
          message: `–°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∞–ø–∞ ‚Ññ${stageOrder}. ${res.message}`,
        };
      }

      case 'catchUp':
        return initialResponse;

      case 'criterium':
        return initialResponse;

      default:
        throw new Error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–µ—Ä–∏–∏: ${seriesType}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∏—à–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≠—Ç–∞–ø–∞ —Å–µ—Ä–∏–∏ –∏–ª–∏ —Ç—É—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å ZwiftAPI.
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–π–¥–µ—Ä–æ–≤.
   * –ó–∞–ø—Ä–æ—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–æ–≤.
   *
   * @param {number} stageOrder - –ù–æ–º–µ—Ä —ç—Ç–∞–ø–∞ (order) –≤ —Å–µ—Ä–∏–∏ –∑–∞–µ–∑–¥–æ–≤.
   */
  public async buildStageProtocol(stageOrder: number): Promise<{ seriesType: TSeriesType }> {
    const { stages: stagesFromSeries, type } = await this.getSeriesData();

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∑–∞–µ–∑–¥–æ–≤, –µ—Å–ª–∏ –≤ —ç—Ç–∞–ø–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–µ–∑–¥–æ–≤.
    const stages = stagesFromSeries
      .filter((stage) => stage.order === stageOrder)
      .map((stage) => stage.event);

    if (stages.length === 0) {
      throw new Error(`–≠—Ç–∞–ø —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º ${stageOrder} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä–∏–∏.`);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∏—à–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∑–∞–µ–∑–¥–æ–≤ –≠—Ç–∞–ø–∞ —Å–µ—Ä–∏–∏ –∏–∑ ZwiftAPI.
    const { stageResults: protocolsStageFromZwift, subgroupIdsInEvents } =
      await this.getProtocolsStageFromZwift({
        stages,
        stageOrder,
      });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–π–¥–µ—Ä–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∞–ø–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–π–¥–µ—Ä–æ–≤. (–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∏–Ω–∏—à–Ω–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ ZwiftAPI).
    const resultsWithAgeAndFlag = await addAgeAndFlagNew(
      subgroupIdsInEvents,
      protocolsStageFromZwift
    );

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–π–¥–µ—Ä–∞–º.
    const resultsWithCategories = await this.setCategories({
      stageResults: resultsWithAgeAndFlag,
      stageOrder,
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–∫–∏–Ω–≥–∞ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    const resultsWithRank = this.setCategoryRanks(resultsWithCategories);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–Ω–∏—à–Ω—ã—Ö –≥—ç–ø–æ–≤ (—Ä–∞–∑—Ä—ã–≤–æ–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏).
    const finishGaps = new FinishGaps();
    finishGaps.setGaps(resultsWithRank, {
      getDuration: (r) => r.activityData.durationInMilliseconds,
      getCategory: (r) => r.category,
      setGaps: (r, gaps) => {
        r.gapsInCategories = gaps;
      },
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ —Å–µ—Ä–∏–∏.
    await this.deleteOutdatedStageResults(stageOrder);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î.
    await StageResultModel.create(resultsWithRank);

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ  hasResults –∏ resultsUpdatedAt –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞–ø–∞ —Å–µ—Ä–∏–∏.
    await NSeriesModel.findOneAndUpdate(
      { _id: this.seriesId, 'stages.order': stageOrder },
      {
        $set: {
          'stages.$.resultsUpdatedAt': new Date(),
          'stages.$.hasResults': resultsWithRank.length > 0,
        },
      }
    );

    return { seriesType: type };
  }

  /**
   * –ü–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —ç—Ç–∞–ø–∞ –ø–æ—Å–ª–µ –ø—Ä–∞–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.
   */
  public async recalculateStageProtocol(): Promise<void> {}
}
