import WebSocket from 'ws';

import { validateAccessToken } from '../authentication/token.js';

// –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export function handleAuthMessage(token: string): { userId: string | null; error?: string } {
  try {
    if (!token || token === 'null') {
      return { userId: null, error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω null' };
    }

    const isValidAccessToken = validateAccessToken(token);
    if (!isValidAccessToken) {
      return { userId: null, error: '–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π accessToken' };
    }

    return { userId: isValidAccessToken.id };
  } catch (error) {
    return { userId: null, error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export function handleRegularMessage(
  ws: WebSocket,
  userId: string | null,
  data: WebSocket.RawData
) {
  try {
    const message = JSON.parse(data.toString());
    console.log(`üì® Message from userId ${userId}:`, message);

    switch (message.type) {
      case 'PING':
        ws.send(JSON.stringify({ type: 'PONG', timestamp: Date.now() }));
        break;
      case 'MARK_AS_READ':
        if (message.messageId) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
        }
        break;
      default:
        ws.send(
          JSON.stringify({
            type: 'ERROR',
            message: 'Unknown message type',
          })
        );
    }
  } catch (error) {
    ws.send(
      JSON.stringify({
        type: 'ERROR',
        message: 'Invalid JSON format',
      })
    );
  }
}
