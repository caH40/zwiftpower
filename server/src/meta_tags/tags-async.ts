import { ZwiftEvent } from '../Model/ZwiftEvent.js';
import { raceTypes } from '../assets/race-type.js';
import { serverWoWWW } from '../config/environment.js';
import { getTimerLocal } from '../utils/date-local.js';
import { getMetaOtherPages } from './tags.js';

// types
import { MetaTags } from '../types/types.interface.js';
import { millisecondsInWeekDays } from '../assets/date.js';
import { Rider } from '../Model/Rider.js';
import { Organizer } from '../Model/Organizer.js';
import { TFileMetadataForCloud } from '../types/model.interface.js';
import { createUrlsToFileCloud } from '../utils/url.js';

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
 */
export const getSignedRidersMeta = async (url: string): Promise<MetaTags> => {
  try {
    const eventId = +url.replace('/race/schedule/', '');

    const zwiftEventDB = await ZwiftEvent.findOne(
      { id: eventId },
      {
        imageUrl: true,
        name: true,
        eventStart: true,
        organizer: true,
        typeRaceCustom: true,
      }
    ).lean();

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≠–≤–µ–Ω—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ú–µ—Ç–∞ –¢—ç–≥–∏ –¥–ª—è "–ø—Ä–æ—á–∏—Ö" —Å—Ç—Ä–∞–Ω–∏—Ü
    if (!zwiftEventDB) {
      return getMetaOtherPages(url);
    }

    const { imageUrl, name, eventStart, organizer, typeRaceCustom } = zwiftEventDB;

    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const eventStartLocal = getTimerLocal(eventStart, 'DDMMYYHm');
    const type = raceTypes.find((race) => race.value === typeRaceCustom)?.name;

    const titleRaw = `–ó–∞–µ–∑–¥ '${name}', ${eventStartLocal}. RideOn`;
    // –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö
    const title = titleRaw.replace(/"/g, '');
    const canonical = serverWoWWW + url;
    const descriptionRaw = `–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–µ–∑–¥–∞ '${name}'. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥–∞ '${organizer}' –≤ Zwift. –¢–∏–ø –∑–∞–µ–∑–¥–∞ '${
      type ? type : '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–µ–∑ –≥—Ä—É–ø–ø'
    }'.`;
    // –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö
    const description = descriptionRaw.replace(/"/g, '');
    const image = imageUrl;

    // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞—á–∞–≤—à–∏–µ—Å—è –∑–∞–µ–∑–¥—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    const today = Date.now();
    const actualPage = new Date(eventStart).getTime() > today;
    const recommendationsTag = actualPage ? 'need_show' : 'ban';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–∞"
 */
export const getRaceResultsMeta = async (url: string): Promise<MetaTags> => {
  try {
    const eventId = +url.replace('/race/results/', '');

    const zwiftEventDB = await ZwiftEvent.findOne(
      { id: eventId },
      { imageUrl: true, name: true, eventStart: true, organizer: true, typeRaceCustom: true }
    ).lean();

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≠–≤–µ–Ω—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ú–µ—Ç–∞ –¢—ç–≥–∏ –¥–ª—è "–ø—Ä–æ—á–∏—Ö" —Å—Ç—Ä–∞–Ω–∏—Ü
    if (!zwiftEventDB) {
      return getMetaOtherPages(url);
    }

    const { imageUrl, name, eventStart, organizer, typeRaceCustom } = zwiftEventDB;

    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const eventStartLocal = getTimerLocal(eventStart, 'DDMMYY');
    const type = raceTypes.find((race) => race.value === typeRaceCustom)?.name;

    const titleRaw = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–∞ '${name}'`;
    // –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö
    const title = titleRaw.replace(/"/g, '');
    const canonical = serverWoWWW + url;
    const descriptionRaw = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–∞ '${name}' –æ—Ç ${eventStartLocal}, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π '${organizer}' –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –º–∏—Ä–µ Zwift (–ó–≤–∏—Ñ—Ç). –¢–∏–ø –∑–∞–µ–∑–¥–∞ '${
      type ? type : '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–µ–∑ –≥—Ä—É–ø–ø'
    }'.`;
    // –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö
    const description = descriptionRaw.replace(/"/g, '');
    const image = imageUrl;

    // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏
    const today = Date.now();
    const actualPage = new Date(eventStart).getTime() > today - millisecondsInWeekDays;

    const recommendationsTag = actualPage ? 'need_show' : 'ban';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
 */
export const getProfileResultsMeta = async (url: string): Promise<MetaTags> => {
  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ url.
    const parts = url.split('/');
    const zwiftId = Number(parts[2]);
    const page = parts.at(-1);

    if (
      isNaN(zwiftId) ||
      !page ||
      !['results', 'power', 'racing-score', 'weight-and-height'].includes(page)
    ) {
      return getMetaOtherPages(url);
    }

    const riderDB = await Rider.findOne(
      { zwiftId },
      {
        firstName: true,
        lastName: true,
        imageSrc: true,
      }
    ).lean();

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≠–≤–µ–Ω—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ú–µ—Ç–∞ –¢—ç–≥–∏ –¥–ª—è "–ø—Ä–æ—á–∏—Ö" —Å—Ç—Ä–∞–Ω–∏—Ü
    if (!riderDB) {
      return getMetaOtherPages(url);
    }

    const { firstName, lastName, imageSrc } = riderDB;

    const rider = `${firstName} ${lastName}`;

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–µ–∑–¥–æ–≤.
    let descriptionRaw = `–ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–π–¥–µ—Ä–∞ ${rider}. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–æ–≤ –≤ Zwift (–ó–≤–∏—Ñ—Ç).`;
    let titleRaw = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–æ–≤ ${rider}`;

    switch (page) {
      case 'power':
        descriptionRaw = `–ö—Ä–∏–≤–∞—è –º–æ—â–Ω–æ—Å—Ç–∏ –∑–∞ 90 –¥–Ω–µ–π ${rider} –≤ Zwift (–ó–≤–∏—Ñ—Ç). –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—Ä–∏–≤—ã—Ö –º–æ—â–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –∑–∞–µ–∑–¥—ã.`;

        titleRaw = `–î–∏–∞–≥—Ä–∞–º–º–∞ –º–æ—â–Ω–æ—Å—Ç–∏ ${rider}`;
        break;

      case 'racing-score':
        descriptionRaw = `–î–∏–∞–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ (Racing Score) —Ä–∞–π–¥–µ—Ä–∞ ${rider} –≤ Zwift (–ó–≤–∏—Ñ—Ç).`;

        titleRaw = `–î–∏–∞–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Racing Score –¥–ª—è —Ä–∞–π–¥–µ—Ä–∞ ${rider}`;
        break;

      case 'weight-and-height':
        descriptionRaw = `–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ —Ä–∞–π–¥–µ—Ä–∞ ${rider} –≤ Zwift (–ó–≤–∏—Ñ—Ç). –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ—Å—Ç–∞.`;

        titleRaw = `–î–∏–∞–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ —Ä–∞–π–¥–µ—Ä–∞ ${rider}`;
        break;
    }

    // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö.
    const description = descriptionRaw.replace(/"/g, '');
    const title = titleRaw.replace(/"/g, '');

    const canonical = serverWoWWW + url;
    const image = imageSrc;
    const recommendationsTag = 'profile';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–µ–∑–¥–æ–≤"
 */
export const getOrganizerPublicMeta = async (url: string): Promise<MetaTags> => {
  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ url.
    const parts = url.split('/');
    const urlSlug = parts.at(-1);

    if (!urlSlug) {
      return getMetaOtherPages(url);
    }

    const organizerDB = await Organizer.findOne(
      { urlSlug, isPublished: true },
      {
        name: true,
        posterFileInfo: true,
        _id: false,
      }
    ).lean<{ name: string; posterFileInfo?: TFileMetadataForCloud }>();

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, –∏–ª–∏ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    if (!organizerDB) {
      return getMetaOtherPages(url);
    }

    const posterUrls = createUrlsToFileCloud(organizerDB.posterFileInfo);

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–µ–∑–¥–æ–≤.
    const descriptionRaw = `${organizerDB.name} –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –≥–æ–Ω–∫–∏ –≤ Zwift: –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–µ–∑–¥—ã, –∫–æ–º–∞–Ω–¥–Ω—ã–µ –≥–æ–Ω–∫–∏, TT, –∫–æ—Ñ–µ—Ä–∞–π–¥—ã –∏ —Ç—É—Ä—ã. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∑–∞–µ–∑–¥–∞–º –∏ —É–ª—É—á—à–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!`;
    const titleRaw = `${organizerDB.name} ‚Äì –ì–æ–Ω–∫–∏ –∏ —Å–µ—Ä–∏–∏ –∑–∞–µ–∑–¥–æ–≤ Zwift üö¥`;

    // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö.
    const description = descriptionRaw.replace(/"/g, '');
    const title = titleRaw.replace(/"/g, '');

    const canonical = serverWoWWW + url;
    const image =
      posterUrls?.medium ||
      posterUrls?.original ||
      'https://zwiftpower.ru/images/open_graph/organizers.webp';
    const recommendationsTag = 'organizer';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};
