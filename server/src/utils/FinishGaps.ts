// types
import { TGapsInCategories } from '../types/model.interface';
import { TRaceSeriesCategories, TFinishGapsGetters } from '../types/types.interface';

/**
 * –ö–ª–∞—Å—Å —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–π (–≥—ç–ø–æ–≤) –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ–º –∑–∞—á—ë—Ç–∞—Ö.
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω ‚Äî –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä.
 */
export class FinishGaps {
  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥—ç–ø–æ–≤.
   *
   * @param results –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –∫ –º–µ–¥–ª–µ–Ω–Ω–æ–º—É).
   * @param getters –û–±—ä–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏–π-–∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
   */
  setGaps = <T>(results: T[], getters: TFinishGapsGetters<T>) => {
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –≥—ç–ø—ã.
    const categoriesInResults = new Set<TRaceSeriesCategories | 'absolute'>(['absolute']);

    // –°–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for (const result of results) {
      const cat = getters.getCategory(result);
      if (cat) categoriesInResults.add(cat);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –ª–∏–¥–µ—Ä–∞ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–π–¥–µ—Ä–∞ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const indexesInCategories: Partial<
      Record<TRaceSeriesCategories | 'absolute', { leader: number | null; prev: number }>
    > = {};
    for (const key of categoriesInResults) {
      indexesInCategories[key] = { leader: null, prev: 0 };
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚Äî –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    for (let i = 0; i < results.length; i++) {
      const result = results[i];
      const category = getters.getCategory(result);

      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≥—ç–ø—ã/
      const gaps: TGapsInCategories = { category: null, absolute: null };

      // üëâ 1. –†–∞—Å—á—ë—Ç –≥—ç–ø–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (category) {
        const entry = indexesInCategories[category];
        if (entry) {
          if (entry.leader === null) {
            // –ü–µ—Ä–≤—ã–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –ª–∏–¥–µ—Ä–∞ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            entry.leader = i;
            entry.prev = i;
          } else {
            // –†–∞—Å—á—ë—Ç –≥—ç–ø–∞ –∫ –ª–∏–¥–µ—Ä—É –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É
            gaps.category = this.calculateGaps(results, i, entry.leader, entry.prev, getters);
            entry.prev = i; // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
          }
        }
      }

      // üëâ 2. –†–∞—Å—á—ë—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –≥—ç–ø–∞
      const absolute = indexesInCategories['absolute'];
      if (absolute) {
        if (i === 0) {
          absolute.leader = 0; // –ü–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ª–∏–¥–µ—Ä
        } else {
          // –†–∞—Å—á—ë—Ç –≥—ç–ø–∞ –∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ª–∏–¥–µ—Ä—É –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É
          gaps.absolute = this.calculateGaps(results, i, 0, i - 1, getters);
        }
      }

      // üëâ 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≥—ç–ø—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      getters.setGaps(result, gaps);
    }
  };

  /**
   * –ú–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ –≥—ç–ø–∞ –∫ –ª–∏–¥–µ—Ä—É –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–∞–π–¥–µ—Ä—É.
   *
   * @param results –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
   * @param index –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
   * @param leaderIndex –ò–Ω–¥–µ–∫—Å –ª–∏–¥–µ—Ä–∞ (–ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∑–∞—á—ë—Ç–µ).
   * @param prevIndex –ò–Ω–¥–µ–∫—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∑–∞—á—ë—Ç–µ.
   * @param getters –§—É–Ω–∫—Ü–∏–∏-–∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
   * @returns –û–±—ä–µ–∫—Ç —Å –≥—ç–ø–∞–º–∏: –∫ –ª–∏–¥–µ—Ä—É –∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É.
   */
  calculateGaps = <T>(
    results: T[],
    index: number,
    leaderIndex: number,
    prevIndex: number,
    getters: TFinishGapsGetters<T>
  ): { toLeader: number; toPrev: number } => {
    const toLeader =
      getters.getDuration(results[index]) - getters.getDuration(results[leaderIndex]);
    const toPrev =
      getters.getDuration(results[index]) - getters.getDuration(results[prevIndex]);

    return { toLeader, toPrev };
  };
}
