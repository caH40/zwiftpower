import { ZwiftEvent } from '../Model/ZwiftEvent.js';
import { raceTypes } from '../assets/race-type.js';
import { serverWoWWW } from '../config/environment.js';
import { getTimerLocal } from '../utils/date-local.js';
import { getMetaOtherPages } from './tags.js';
import { createUrlsToFileCloud } from '../utils/url.js';
import { NSeriesModel } from '../Model/NSeries.js';
import { millisecondsInWeekDays } from '../assets/date.js';
import { Rider } from '../Model/Rider.js';
import { Organizer } from '../Model/Organizer.js';
import { TeamModel } from '../Model/Team.js';

// types
import { MetaTags } from '../types/types.interface.js';
import { TFileMetadataForCloud } from '../types/model.interface.js';
import { TSeriesForMetaTagsResponseDB } from '../types/mongodb-response.types.js';

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
 */
export const getSignedRidersMeta = async (url: string): Promise<MetaTags> => {
  try {
    const eventId = +url.replace('/race/schedule/', '');

    const zwiftEventDB = await ZwiftEvent.findOne(
      { id: eventId },
      {
        imageUrl: true,
        name: true,
        eventStart: true,
        organizer: true,
        typeRaceCustom: true,
      }
    ).lean();

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≠–≤–µ–Ω—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ú–µ—Ç–∞ –¢—ç–≥–∏ –¥–ª—è "–ø—Ä–æ—á–∏—Ö" —Å—Ç—Ä–∞–Ω–∏—Ü
    if (!zwiftEventDB) {
      return getMetaOtherPages(url);
    }

    const { imageUrl, name, eventStart, organizer, typeRaceCustom } = zwiftEventDB;

    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const eventStartLocal = getTimerLocal(eventStart, 'DDMMYYHm');
    const type = raceTypes.find((race) => race.value === typeRaceCustom)?.name;

    const titleRaw = `–ó–∞–µ–∑–¥ '${name}', ${eventStartLocal}. RideOn`;
    // –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö
    const title = titleRaw.replace(/"/g, '');
    const canonical = serverWoWWW + url;
    const descriptionRaw = `–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–µ–∑–¥–∞ '${name}'. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥–∞ '${organizer}' –≤ Zwift. –¢–∏–ø –∑–∞–µ–∑–¥–∞ '${
      type ? type : '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–µ–∑ –≥—Ä—É–ø–ø'
    }'.`;
    // –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö
    const description = descriptionRaw.replace(/"/g, '');
    const image = imageUrl;

    // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞—á–∞–≤—à–∏–µ—Å—è –∑–∞–µ–∑–¥—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    const today = Date.now();
    const actualPage = new Date(eventStart).getTime() > today;
    const recommendationsTag = actualPage ? 'need_show' : 'ban';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–∞"
 */
export const getRaceResultsMeta = async (url: string): Promise<MetaTags> => {
  try {
    const eventId = +url.replace('/race/results/', '');

    const zwiftEventDB = await ZwiftEvent.findOne(
      { id: eventId },
      { imageUrl: true, name: true, eventStart: true, organizer: true, typeRaceCustom: true }
    ).lean();

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≠–≤–µ–Ω—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ú–µ—Ç–∞ –¢—ç–≥–∏ –¥–ª—è "–ø—Ä–æ—á–∏—Ö" —Å—Ç—Ä–∞–Ω–∏—Ü
    if (!zwiftEventDB) {
      return getMetaOtherPages(url);
    }

    const { imageUrl, name, eventStart, organizer, typeRaceCustom } = zwiftEventDB;

    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const eventStartLocal = getTimerLocal(eventStart, 'DDMMYY');
    const type = raceTypes.find((race) => race.value === typeRaceCustom)?.name;

    const titleRaw = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–∞ '${name}'`;
    // –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö
    const title = titleRaw.replace(/"/g, '');
    const canonical = serverWoWWW + url;
    const descriptionRaw = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–∞ '${name}' –æ—Ç ${eventStartLocal}, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π '${organizer}' –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –º–∏—Ä–µ Zwift (–ó–≤–∏—Ñ—Ç). –¢–∏–ø –∑–∞–µ–∑–¥–∞ '${
      type ? type : '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–µ–∑ –≥—Ä—É–ø–ø'
    }'.`;
    // –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö
    const description = descriptionRaw.replace(/"/g, '');
    const image = imageUrl;

    // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏
    const today = Date.now();
    const actualPage = new Date(eventStart).getTime() > today - millisecondsInWeekDays;

    const recommendationsTag = actualPage ? 'need_show' : 'ban';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
 */
export const getProfileResultsMeta = async (url: string): Promise<MetaTags> => {
  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ url.
    const parts = url.split('/');
    const zwiftId = Number(parts[2]);
    const page = parts.at(-1);

    if (
      isNaN(zwiftId) ||
      !page ||
      !['results', 'power', 'racing-score', 'weight-and-height'].includes(page)
    ) {
      return getMetaOtherPages(url);
    }

    const riderDB = await Rider.findOne(
      { zwiftId },
      {
        firstName: true,
        lastName: true,
        imageSrc: true,
      }
    ).lean();

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≠–≤–µ–Ω—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ú–µ—Ç–∞ –¢—ç–≥–∏ –¥–ª—è "–ø—Ä–æ—á–∏—Ö" —Å—Ç—Ä–∞–Ω–∏—Ü
    if (!riderDB) {
      return getMetaOtherPages(url);
    }

    const { firstName, lastName, imageSrc } = riderDB;

    const rider = `${firstName} ${lastName}`;

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–µ–∑–¥–æ–≤.
    let descriptionRaw = `–ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–π–¥–µ—Ä–∞ ${rider}. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–æ–≤ –≤ Zwift (–ó–≤–∏—Ñ—Ç).`;
    let titleRaw = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–µ–∑–¥–æ–≤ ${rider}`;

    switch (page) {
      case 'power':
        descriptionRaw = `–ö—Ä–∏–≤–∞—è –º–æ—â–Ω–æ—Å—Ç–∏ –∑–∞ 90 –¥–Ω–µ–π ${rider} –≤ Zwift (–ó–≤–∏—Ñ—Ç). –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—Ä–∏–≤—ã—Ö –º–æ—â–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –∑–∞–µ–∑–¥—ã.`;

        titleRaw = `–î–∏–∞–≥—Ä–∞–º–º–∞ –º–æ—â–Ω–æ—Å—Ç–∏ ${rider}`;
        break;

      case 'racing-score':
        descriptionRaw = `–î–∏–∞–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ (Racing Score) —Ä–∞–π–¥–µ—Ä–∞ ${rider} –≤ Zwift (–ó–≤–∏—Ñ—Ç).`;

        titleRaw = `–î–∏–∞–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Racing Score –¥–ª—è —Ä–∞–π–¥–µ—Ä–∞ ${rider}`;
        break;

      case 'weight-and-height':
        descriptionRaw = `–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ —Ä–∞–π–¥–µ—Ä–∞ ${rider} –≤ Zwift (–ó–≤–∏—Ñ—Ç). –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ—Å—Ç–∞.`;

        titleRaw = `–î–∏–∞–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ —Ä–∞–π–¥–µ—Ä–∞ ${rider}`;
        break;
    }

    // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö.
    const description = descriptionRaw.replace(/"/g, '');
    const title = titleRaw.replace(/"/g, '');

    const canonical = serverWoWWW + url;
    const image = imageSrc;
    const recommendationsTag = 'profile';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–µ–∑–¥–æ–≤"
 */
export const getOrganizerPublicMeta = async (url: string): Promise<MetaTags> => {
  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ url.
    const parts = url.split('/');
    const urlSlug = parts.at(-2);
    const pageType = (parts.at(-1) as 'series' | 'schedule') || 'series';

    if (typeof urlSlug !== 'string') {
      return getMetaOtherPages(url);
    }

    const organizerDB = await Organizer.findOne(
      { urlSlug, isPublished: true },
      {
        name: true,
        posterFileInfo: true,
        _id: false,
      }
    ).lean<{ name: string; posterFileInfo?: TFileMetadataForCloud }>();

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, –∏–ª–∏ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    if (!organizerDB) {
      return getMetaOtherPages(url);
    }

    const posterUrls = createUrlsToFileCloud(organizerDB.posterFileInfo);

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–µ–∑–¥–æ–≤.
    const baseTitle = `${organizerDB.name} –≤ Zwift üö¥`;
    const baseDescription = `${organizerDB.name} –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –≥–æ–Ω–∫–∏ –≤ Zwift: –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–µ–∑–¥—ã, –∫–æ–º–∞–Ω–¥–Ω—ã–µ –≥–æ–Ω–∫–∏, TT, –∫–æ—Ñ–µ—Ä–∞–π–¥—ã –∏ —Ç—É—Ä—ã. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∑–∞–µ–∑–¥–∞–º –∏ —É–ª—É—á—à–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!`;
    const pageTextMap = {
      schedule: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–µ–∑–¥–æ–≤',
      series: '–°–µ—Ä–∏–∏ –∏ —Ç—É—Ä—ã',
    } as const;

    const descriptionRaw = `${baseDescription} üìÖ ${pageTextMap[pageType]} –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.`;
    const titleRaw = `${pageTextMap[pageType]} –æ—Ç ${baseTitle}`;

    // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö.
    const description = descriptionRaw.replace(/"/g, '');
    const title = titleRaw.replace(/"/g, '');

    const canonical = serverWoWWW + url;
    const image =
      posterUrls?.medium ||
      posterUrls?.original ||
      'https://zwiftpower.ru/images/open_graph/organizers.webp';
    const recommendationsTag = 'organizer';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –°–µ—Ä–∏–∏ –∑–∞–µ–∑–¥–æ–≤"
 */
export const getSeriesScheduleMeta = async (url: string): Promise<MetaTags> => {
  try {
    const { seriesDB, posterUrls, dateStart, dateEnd, organizerName } = await handleSeriesData(
      url
    );

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–µ–∑–¥–æ–≤.
    const descriptionRaw = seriesDB.mission
      ? `${seriesDB.mission} –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!`
      : `–°–ª–µ–¥–∏—Ç–µ –∑–∞ —ç—Ç–∞–ø–∞–º–∏ "${seriesDB.name}" (${dateStart}-${dateEnd}). –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${organizerName}. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!`;
    const titleRaw = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤: ${seriesDB.name} —Å ${dateStart} –ø–æ ${dateEnd}, –ø—Ä–æ–≤–æ–¥–∏–º—ã—Ö –≤ –ó–≤–∏—Ñ—Ç–µ. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${organizerName}`;

    // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö.
    const description = descriptionRaw.replace(/"/g, '');
    const title = titleRaw.replace(/"/g, '');

    const canonical = serverWoWWW + url;
    const image =
      posterUrls?.medium ||
      posterUrls?.original ||
      'https://zwiftpower.ru/images/open_graph/series.webp';
    const recommendationsTag = 'series';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–†–µ–≥–ª–∞–º–µ–Ω—Ç –°–µ—Ä–∏–∏ –∑–∞–µ–∑–¥–æ–≤"
 */
export const getSeriesRegulationsMeta = async (url: string): Promise<MetaTags> => {
  try {
    const { seriesDB, posterUrls, dateStart, dateEnd, organizerName } = await handleSeriesData(
      url
    );

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–µ–∑–¥–æ–≤.
    const descriptionRaw = seriesDB.mission
      ? `${seriesDB.mission} –£–∑–Ω–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–∏–∑—ã –∏ –¥—Ä—É–≥—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!`
      : `–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º "${seriesDB.name}" (${dateStart}-${dateEnd}). –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${organizerName}. –£–∑–Ω–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–∏–∑—ã –∏ –¥—Ä—É–≥—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!`;
    const titleRaw = `–†–µ–≥–ª–∞–º–µ–Ω—Ç: ${seriesDB.name} —Å ${dateStart} –ø–æ ${dateEnd}, –ø—Ä–æ–≤–æ–¥–∏–º—ã—Ö –≤ –ó–≤–∏—Ñ—Ç–µ. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${organizerName}`;

    // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö.
    const description = descriptionRaw.replace(/"/g, '');
    const title = titleRaw.replace(/"/g, '');

    const canonical = serverWoWWW + url;
    const image =
      posterUrls?.medium ||
      posterUrls?.original ||
      'https://zwiftpower.ru/images/open_graph/series.webp';
    const recommendationsTag = 'series';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –°–µ—Ä–∏–∏ –∑–∞–µ–∑–¥–æ–≤"
 */
export const getSeriesResultsMeta = async (url: string): Promise<MetaTags> => {
  try {
    const { seriesDB, posterUrls, dateStart, dateEnd, organizerName } = await handleSeriesData(
      url
    );

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–µ–∑–¥–æ–≤.
    const descriptionRaw = seriesDB.mission
      ? `${seriesDB.mission} –ò—Ç–æ–≥–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Ä–∏–∏`
      : `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏—Ç–æ–≥–æ–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ "${seriesDB.name}" (${dateStart}-${dateEnd}). –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${organizerName}. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º!`;
    const titleRaw = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞—á–µ—Ç—ã: ${seriesDB.name} —Å ${dateStart} –ø–æ ${dateEnd}, –ó–≤–∏—Ñ—Ç. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${organizerName}`;

    // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö.
    const description = descriptionRaw.replace(/"/g, '');
    const title = titleRaw.replace(/"/g, '');

    const canonical = serverWoWWW + url;
    const image =
      posterUrls?.medium ||
      posterUrls?.original ||
      'https://zwiftpower.ru/images/open_graph/series.webp';
    const recommendationsTag = 'series';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"
 */
export const getTeamRiderResultsMeta = async (url: string): Promise<MetaTags> => {
  try {
    const urlSlug = url.split('/')?.at(-2);

    if (!urlSlug) {
      return getMetaOtherPages(url);
    }

    const team = await TeamModel.findOne(
      { urlSlug },
      { name: true, logoFileInfo: true, posterFileInfo: true }
    ).lean();

    if (!team) {
      return getMetaOtherPages(url);
    }

    const descriptionRaw = `–ò—Å—Ç–æ—Ä–∏—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥—ã ${team.name} –Ω–∞ Zwiftpower.ru. –ò—Ç–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–æ–Ω–æ–∫, —Å–µ—Ä–∏–π –∏ —Ç—É—Ä–æ–≤, –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã (ZP points) –∏ –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. üèÜüìà`;
    const titleRaw = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥—ã ${team.name} | –ò—Å—Ç–æ—Ä–∏—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤ –∑–∞–µ–∑–¥–∞—Ö | Zwiftpower.ru`;

    // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö.
    const description = descriptionRaw.replace(/"/g, '');
    const title = titleRaw.replace(/"/g, '');

    const posterUrls = createUrlsToFileCloud(team.posterFileInfo);
    const logoUrls = createUrlsToFileCloud(team.logoFileInfo);

    const canonical = serverWoWWW + url;
    const image =
      logoUrls?.original ||
      posterUrls?.medium ||
      posterUrls?.original ||
      'https://zwiftpower.ru/images/open_graph/teams.png';
    const recommendationsTag = 'team';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–µ—Ç–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã"
 */
export const getTeamMembersMeta = async (url: string): Promise<MetaTags> => {
  try {
    const urlSlug = url.split('/')?.at(-2);

    if (!urlSlug) {
      return getMetaOtherPages(url);
    }

    const team = await TeamModel.findOne(
      { urlSlug },
      { name: true, logoFileInfo: true, posterFileInfo: true }
    ).lean();

    if (!team) {
      return getMetaOtherPages(url);
    }

    const descriptionRaw = `–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã ${team.name} –Ω–∞ Zwiftpower.ru. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ–Ω—â–∏–∫–æ–≤, –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π. –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–∏—â–µ–π! üö¥‚Äç‚ôÇÔ∏èüë•`;
    const titleRaw = `–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã ${team.name} | –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ | Zwiftpower.ru`;

    // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –º–µ—Ç–∞ —Ç–µ–≥–∞—Ö.
    const description = descriptionRaw.replace(/"/g, '');
    const title = titleRaw.replace(/"/g, '');

    const posterUrls = createUrlsToFileCloud(team.posterFileInfo);
    const logoUrls = createUrlsToFileCloud(team.logoFileInfo);

    const canonical = serverWoWWW + url;
    const image =
      logoUrls?.original ||
      posterUrls?.medium ||
      posterUrls?.original ||
      'https://zwiftpower.ru/images/open_graph/teams.png';
    const recommendationsTag = 'team';

    return { title, canonical, description, image, recommendationsTag };
  } catch (error) {
    return getMetaOtherPages(url);
  }
};

async function handleSeriesData(url: string) {
  const parts = url.split('/');
  const urlSlug = parts.at(-2);

  if (typeof urlSlug !== 'string') {
    throw new Error('–ù–µ—Ç url');
  }

  const seriesDB = await NSeriesModel.findOne(
    { urlSlug },
    {
      name: true,
      dateStart: true,
      dateEnd: true,
      organizer: true,
      mission: true,
      posterFileInfo: true,
      _id: false,
    }
  )
    .populate({ path: 'organizer', select: ['name'] })
    .lean<TSeriesForMetaTagsResponseDB>();

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –°–µ—Ä–∏—è –∑–∞–µ–∑–¥–æ–≤.
  if (!seriesDB) {
    throw new Error('–ù–µ—Ç url');
  }

  const posterUrls = createUrlsToFileCloud(seriesDB.posterFileInfo);

  const dateStart = getTimerLocal(seriesDB.dateStart.toISOString(), 'DDMMYY');
  const dateEnd = getTimerLocal(seriesDB.dateEnd.toISOString(), 'DDMMYY');
  const organizerName = seriesDB.organizer.name;

  return { seriesDB, posterUrls, dateStart, dateEnd, organizerName };
}
